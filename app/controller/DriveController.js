/*
 * File: app/controller/DriveController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Ldriver.controller.DriveController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.drivecontroller',

    config: {
        refs: {
            resumebutton: 'button[name=resumebutton]',
            main: 'main',
            tripchecklistform: 'formpanel[name=tripchecklistform]',
            recordbutton: 'button[name=recordbutton]',
            recordingbutton: 'button[name=recordingbutton]',
            pausedresumebutton: 'button[name=pausedresumebutton]',
            pausedendbutton: 'button[name=pausedendbutton]',
            approvemodalpanelclose: 'button[name=approvemodalpanelclose]',
            tripchecklistbubbleclose: 'button[name=tripchecklistbubbleclose]'
        },

        control: {
            "resumebutton": {
                tap: 'onresumeButtonTap'
            },
            "recordbutton": {
                tap: 'onrecordButtonTap'
            },
            "recordingbutton": {
                tap: 'onrecordingButtonTap'
            },
            "pausedresumebutton": {
                tap: 'onpausedresumeButtonTap'
            },
            "pausedendbutton": {
                tap: 'onpausedendButtonTap'
            },
            "tripchecklistbubbleclose": {
                tap: 'ontripchecklistbubblecloseButtonTap'
            },
            "approvemodalpanelclose": {
                tap: 'onapprovemodalpanelcloseButtonTap'
            }
        }
    },

    onresumeButtonTap: function(button, e, eOpts) {
        Ldriver.app.getApplication().getController('MenuController').removeButtonActiveClass('recordingbutton');
        Ldriver.app.getApplication().getController('MenuController').showButton('recordingbutton');
        this.showHidePausePanel(false);
    },

    onrecordButtonTap: function(button, e, eOpts) {
        var main = this.getMain(),
            tripchecklistform = this.getTripchecklistform(),
            formValues = tripchecklistform.getValues();
        var isDrivgerReady = true;
        for(keys in formValues){
            if(!formValues[keys]){
                isDrivgerReady = false;
            }
        }
        if(isDrivgerReady){
            this.showHideAnimation('tripchecklistbubble',true);
            Ldriver.app.getApplication().getController('MenuController').removeButtonActiveClass('recordingbutton');
            Ldriver.app.getApplication().getController('MenuController').showButton('recordingbutton');
        }else{
            Ext.device.Notification.show({
                title: 'Warning!',
                message: 'When all items are checked and you are ready to begin your trip, your supervisor may click \'Record Trip\' below to begin recording this trip.'
            });
        }
    },

    onrecordingButtonTap: function(button, e, eOpts) {
        Ldriver.app.getApplication().getController('MenuController').removeButtonActiveClass('resumebutton');
        Ldriver.app.getApplication().getController('MenuController').showButton('resumebutton');
        this.showHidePausePanel(true);
    },

    onpausedresumeButtonTap: function(button, e, eOpts) {
        Ldriver.app.getApplication().getController('MenuController').removeButtonActiveClass('recordingbutton');
        Ldriver.app.getApplication().getController('MenuController').showButton('recordingbutton');
        this.showHidePausePanel(false);
    },

    onpausedendButtonTap: function(button, e, eOpts) {
        Ldriver.app.getApplication().getController('MenuController').removeButtonActiveClass('approvebutton');
        Ldriver.app.getApplication().getController('MenuController').showButton('approvebutton');
        this.showHideAnimation('approvemodalpanel');
    },

    ontripchecklistbubblecloseButtonTap: function(button, e, eOpts) {
        this.showHideAnimation('tripchecklistbubble',true);
    },

    onapprovemodalpanelcloseButtonTap: function(button, e, eOpts) {
        this.showHideAnimation('approvemodalpanel',true);
    },

    showHideAnimation: function(id, hidden) {
        if(!hidden){
            Ext.getCmp(id).setHidden(hidden);
        }
        Ext.Anim.run(Ext.getCmp(id), 'fade', {
            out: hidden,
            autoClear: false
        });
        if(hidden){
            setTimeout(function() {
                Ext.getCmp(id).setHidden(hidden);
            },
            251);
        }
    },

    showHidePausePanel: function(show) {
        if(show){
            Ext.getCmp('driveweatherpanel').setHidden(true);
            Ext.getCmp('drivetimepanel').setHidden(true);
            Ext.getCmp('driveodometer').setHidden(true);
            Ext.getCmp('drivepausepanel').setHidden(false);
            Ext.getCmp('drivepausetimepanel').setHidden(false);
            Ext.getCmp('drivemodalpanel').setHidden(false);
        }else{
            Ext.getCmp('drivemodalpanel').setHidden(true);
            Ext.getCmp('drivepausepanel').setHidden(true);
            Ext.getCmp('drivepausetimepanel').setHidden(true);
            Ext.getCmp('driveweatherpanel').setHidden(false);
            Ext.getCmp('drivetimepanel').setHidden(false);
            Ext.getCmp('driveodometer').setHidden(false);
        }
    }

});