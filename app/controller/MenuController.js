/*
 * File: app/controller/MenuController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Ldriver.controller.MenuController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.menucontroller',

    config: {
        refs: {
            main: 'main',
            dashboard: 'dashboard',
            newtripview: 'newtripview',
            dashboardbutton: 'button[name=dashboardbutton]',
            tripbutton: 'button[name=tripbutton]',
            drivebutton: 'button[name=drivebutton]',
            mytripview: 'mytripview',
            driveview: 'driveview'
        },

        control: {
            "dashboardbutton": {
                tap: 'ondashboardbuttonButtonTap'
            },
            "tripbutton": {
                tap: 'ontripbuttonButtonTap'
            },
            "drivebutton": {
                tap: 'ondrivebuttonButtonTap'
            }
        }
    },

    ondashboardbuttonButtonTap: function(button, e, eOpts) {
        var main = this.getMain(),
            dashboard = this.getDashboard(),
            driveview = this.getDriveview();

        this.removeButtonActiveClass('dashboardbutton');

        //if(main.getActiveItem() != driveview){
        this.showButton('drivebutton');
        //}
        main.getLayout().setAnimation({
            type:'slide',
            direction:'right'
        });
        main.setActiveItem(dashboard);
    },

    ontripbuttonButtonTap: function(button, e, eOpts) {
        var main = this.getMain(),
            mytripview = this.getMytripview();

        this.removeButtonActiveClass('tripbutton');
        main.getLayout().setAnimation({
            type:'slide',
            direction:'left'
        });
        main.setActiveItem(mytripview);
    },

    ondrivebuttonButtonTap: function(button, e, eOpts) {
        var main = this.getMain(),
            newtripview = this.getNewtripview();

        this.removeButtonActiveClass('begintrip');
        this.showButton('begintrip');
        main.getLayout().setAnimation({
            type:'slide',
            direction:'left'
        });
        main.setActiveItem(newtripview);

    },

    activeDriveView: function() {
        var main = this.getMain(),
            driveview = this.getDriveview();
        if(!Ext.app.isDriveViewActivated){
            Ext.app.isDriveViewActivated = true;
            this.removeButtonActiveClass();
            //Ext.getCmp('bottomMenu').removeCls(['dashboard','drive']);
            //Ext.getCmp('bottomMenu').addCls('drive');
            //button.addCls('x-button-active');
            main.getLayout().setAnimation({
                type:'slide',
                direction:'left',
                duration:250
            });
            main.setActiveItem(driveview);
            this.showButton('gobackbutton');
            setTimeout(function(){
                Ext.app.isDriveViewActivated = false;
            },500);
        }
    },

    removeButtonActiveClass: function(id) {
        var ids = ['dashboardbutton','drivebutton','tripbutton','begintrip','recordbutton','recordingbutton','resumebutton','approvebutton'];
        for(var i = 0; i< ids.length;i++){
            Ext.getCmp(ids[i]).removeCls('x-button-active');
        }
        Ext.getCmp(id).addCls('x-button-active');
    },

    showButton: function(id) {
        var ids = ['drivebutton','gobackbutton','pausedbutton','begintrip','recordbutton','recordingbutton','resumebutton','approvebutton'];
        for(var i = 0; i< ids.length;i++){
            Ext.getCmp(ids[i]).setHidden(true);
        }
        Ext.getCmp(id).setHidden(false);
    }

});